// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: PublicAggreDepthsV3Api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface PublicAggreDepthsV3Api {
  asks: PublicAggreDepthV3ApiItem[];
  bids: PublicAggreDepthV3ApiItem[];
  eventType: string;
  fromVersion: string;
  toVersion: string;
}

export interface PublicAggreDepthV3ApiItem {
  price: string;
  quantity: string;
}

function createBasePublicAggreDepthsV3Api(): PublicAggreDepthsV3Api {
  return { asks: [], bids: [], eventType: "", fromVersion: "", toVersion: "" };
}

export const PublicAggreDepthsV3Api: MessageFns<PublicAggreDepthsV3Api> = {
  encode(message: PublicAggreDepthsV3Api, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.asks) {
      PublicAggreDepthV3ApiItem.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.bids) {
      PublicAggreDepthV3ApiItem.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.eventType !== "") {
      writer.uint32(26).string(message.eventType);
    }
    if (message.fromVersion !== "") {
      writer.uint32(34).string(message.fromVersion);
    }
    if (message.toVersion !== "") {
      writer.uint32(42).string(message.toVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicAggreDepthsV3Api {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicAggreDepthsV3Api();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.asks.push(PublicAggreDepthV3ApiItem.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bids.push(PublicAggreDepthV3ApiItem.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fromVersion = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.toVersion = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicAggreDepthsV3Api {
    return {
      asks: globalThis.Array.isArray(object?.asks)
        ? object.asks.map((e: any) => PublicAggreDepthV3ApiItem.fromJSON(e))
        : [],
      bids: globalThis.Array.isArray(object?.bids)
        ? object.bids.map((e: any) => PublicAggreDepthV3ApiItem.fromJSON(e))
        : [],
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      fromVersion: isSet(object.fromVersion) ? globalThis.String(object.fromVersion) : "",
      toVersion: isSet(object.toVersion) ? globalThis.String(object.toVersion) : "",
    };
  },

  toJSON(message: PublicAggreDepthsV3Api): unknown {
    const obj: any = {};
    if (message.asks?.length) {
      obj.asks = message.asks.map((e) => PublicAggreDepthV3ApiItem.toJSON(e));
    }
    if (message.bids?.length) {
      obj.bids = message.bids.map((e) => PublicAggreDepthV3ApiItem.toJSON(e));
    }
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (message.fromVersion !== "") {
      obj.fromVersion = message.fromVersion;
    }
    if (message.toVersion !== "") {
      obj.toVersion = message.toVersion;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicAggreDepthsV3Api>, I>>(base?: I): PublicAggreDepthsV3Api {
    return PublicAggreDepthsV3Api.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicAggreDepthsV3Api>, I>>(object: I): PublicAggreDepthsV3Api {
    const message = createBasePublicAggreDepthsV3Api();
    message.asks = object.asks?.map((e) => PublicAggreDepthV3ApiItem.fromPartial(e)) || [];
    message.bids = object.bids?.map((e) => PublicAggreDepthV3ApiItem.fromPartial(e)) || [];
    message.eventType = object.eventType ?? "";
    message.fromVersion = object.fromVersion ?? "";
    message.toVersion = object.toVersion ?? "";
    return message;
  },
};

function createBasePublicAggreDepthV3ApiItem(): PublicAggreDepthV3ApiItem {
  return { price: "", quantity: "" };
}

export const PublicAggreDepthV3ApiItem: MessageFns<PublicAggreDepthV3ApiItem> = {
  encode(message: PublicAggreDepthV3ApiItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.price !== "") {
      writer.uint32(10).string(message.price);
    }
    if (message.quantity !== "") {
      writer.uint32(18).string(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicAggreDepthV3ApiItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicAggreDepthV3ApiItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.price = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.quantity = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicAggreDepthV3ApiItem {
    return {
      price: isSet(object.price) ? globalThis.String(object.price) : "",
      quantity: isSet(object.quantity) ? globalThis.String(object.quantity) : "",
    };
  },

  toJSON(message: PublicAggreDepthV3ApiItem): unknown {
    const obj: any = {};
    if (message.price !== "") {
      obj.price = message.price;
    }
    if (message.quantity !== "") {
      obj.quantity = message.quantity;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicAggreDepthV3ApiItem>, I>>(base?: I): PublicAggreDepthV3ApiItem {
    return PublicAggreDepthV3ApiItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicAggreDepthV3ApiItem>, I>>(object: I): PublicAggreDepthV3ApiItem {
    const message = createBasePublicAggreDepthV3ApiItem();
    message.price = object.price ?? "";
    message.quantity = object.quantity ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
