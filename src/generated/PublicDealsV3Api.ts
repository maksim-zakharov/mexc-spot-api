// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: PublicDealsV3Api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface PublicDealsV3Api {
  deals: PublicDealsV3ApiItem[];
  eventType: string;
}

export interface PublicDealsV3ApiItem {
  price: string;
  quantity: string;
  tradeType: number;
  time: number;
}

function createBasePublicDealsV3Api(): PublicDealsV3Api {
  return { deals: [], eventType: "" };
}

export const PublicDealsV3Api: MessageFns<PublicDealsV3Api> = {
  encode(message: PublicDealsV3Api, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.deals) {
      PublicDealsV3ApiItem.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.eventType !== "") {
      writer.uint32(18).string(message.eventType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicDealsV3Api {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicDealsV3Api();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deals.push(PublicDealsV3ApiItem.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicDealsV3Api {
    return {
      deals: globalThis.Array.isArray(object?.deals)
        ? object.deals.map((e: any) => PublicDealsV3ApiItem.fromJSON(e))
        : [],
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
    };
  },

  toJSON(message: PublicDealsV3Api): unknown {
    const obj: any = {};
    if (message.deals?.length) {
      obj.deals = message.deals.map((e) => PublicDealsV3ApiItem.toJSON(e));
    }
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicDealsV3Api>, I>>(base?: I): PublicDealsV3Api {
    return PublicDealsV3Api.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicDealsV3Api>, I>>(object: I): PublicDealsV3Api {
    const message = createBasePublicDealsV3Api();
    message.deals = object.deals?.map((e) => PublicDealsV3ApiItem.fromPartial(e)) || [];
    message.eventType = object.eventType ?? "";
    return message;
  },
};

function createBasePublicDealsV3ApiItem(): PublicDealsV3ApiItem {
  return { price: "", quantity: "", tradeType: 0, time: 0 };
}

export const PublicDealsV3ApiItem: MessageFns<PublicDealsV3ApiItem> = {
  encode(message: PublicDealsV3ApiItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.price !== "") {
      writer.uint32(10).string(message.price);
    }
    if (message.quantity !== "") {
      writer.uint32(18).string(message.quantity);
    }
    if (message.tradeType !== 0) {
      writer.uint32(24).int32(message.tradeType);
    }
    if (message.time !== 0) {
      writer.uint32(32).int64(message.time);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicDealsV3ApiItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicDealsV3ApiItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.price = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.quantity = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.tradeType = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.time = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicDealsV3ApiItem {
    return {
      price: isSet(object.price) ? globalThis.String(object.price) : "",
      quantity: isSet(object.quantity) ? globalThis.String(object.quantity) : "",
      tradeType: isSet(object.tradeType) ? globalThis.Number(object.tradeType) : 0,
      time: isSet(object.time) ? globalThis.Number(object.time) : 0,
    };
  },

  toJSON(message: PublicDealsV3ApiItem): unknown {
    const obj: any = {};
    if (message.price !== "") {
      obj.price = message.price;
    }
    if (message.quantity !== "") {
      obj.quantity = message.quantity;
    }
    if (message.tradeType !== 0) {
      obj.tradeType = Math.round(message.tradeType);
    }
    if (message.time !== 0) {
      obj.time = Math.round(message.time);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicDealsV3ApiItem>, I>>(base?: I): PublicDealsV3ApiItem {
    return PublicDealsV3ApiItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicDealsV3ApiItem>, I>>(object: I): PublicDealsV3ApiItem {
    const message = createBasePublicDealsV3ApiItem();
    message.price = object.price ?? "";
    message.quantity = object.quantity ?? "";
    message.tradeType = object.tradeType ?? 0;
    message.time = object.time ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
