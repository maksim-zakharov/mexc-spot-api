// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: PrivateOrdersV3Api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface PrivateOrdersV3Api {
  id: string;
  clientId: string;
  price: string;
  quantity: string;
  amount: string;
  avgPrice: string;
  orderType: number;
  tradeType: number;
  isMaker: boolean;
  remainAmount: string;
  remainQuantity: string;
  lastDealQuantity?: string | undefined;
  cumulativeQuantity: string;
  cumulativeAmount: string;
  status: number;
  createTime: number;
  market?: string | undefined;
  triggerType?: number | undefined;
  triggerPrice?: string | undefined;
  state?: number | undefined;
  ocoId?: string | undefined;
  routeFactor?: string | undefined;
  symbolId?: string | undefined;
  marketId?: string | undefined;
  marketCurrencyId?: string | undefined;
  currencyId?: string | undefined;
}

function createBasePrivateOrdersV3Api(): PrivateOrdersV3Api {
  return {
    id: "",
    clientId: "",
    price: "",
    quantity: "",
    amount: "",
    avgPrice: "",
    orderType: 0,
    tradeType: 0,
    isMaker: false,
    remainAmount: "",
    remainQuantity: "",
    lastDealQuantity: undefined,
    cumulativeQuantity: "",
    cumulativeAmount: "",
    status: 0,
    createTime: 0,
    market: undefined,
    triggerType: undefined,
    triggerPrice: undefined,
    state: undefined,
    ocoId: undefined,
    routeFactor: undefined,
    symbolId: undefined,
    marketId: undefined,
    marketCurrencyId: undefined,
    currencyId: undefined,
  };
}

export const PrivateOrdersV3Api: MessageFns<PrivateOrdersV3Api> = {
  encode(message: PrivateOrdersV3Api, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.price !== "") {
      writer.uint32(26).string(message.price);
    }
    if (message.quantity !== "") {
      writer.uint32(34).string(message.quantity);
    }
    if (message.amount !== "") {
      writer.uint32(42).string(message.amount);
    }
    if (message.avgPrice !== "") {
      writer.uint32(50).string(message.avgPrice);
    }
    if (message.orderType !== 0) {
      writer.uint32(56).int32(message.orderType);
    }
    if (message.tradeType !== 0) {
      writer.uint32(64).int32(message.tradeType);
    }
    if (message.isMaker !== false) {
      writer.uint32(72).bool(message.isMaker);
    }
    if (message.remainAmount !== "") {
      writer.uint32(82).string(message.remainAmount);
    }
    if (message.remainQuantity !== "") {
      writer.uint32(90).string(message.remainQuantity);
    }
    if (message.lastDealQuantity !== undefined) {
      writer.uint32(98).string(message.lastDealQuantity);
    }
    if (message.cumulativeQuantity !== "") {
      writer.uint32(106).string(message.cumulativeQuantity);
    }
    if (message.cumulativeAmount !== "") {
      writer.uint32(114).string(message.cumulativeAmount);
    }
    if (message.status !== 0) {
      writer.uint32(120).int32(message.status);
    }
    if (message.createTime !== 0) {
      writer.uint32(128).int64(message.createTime);
    }
    if (message.market !== undefined) {
      writer.uint32(138).string(message.market);
    }
    if (message.triggerType !== undefined) {
      writer.uint32(144).int32(message.triggerType);
    }
    if (message.triggerPrice !== undefined) {
      writer.uint32(154).string(message.triggerPrice);
    }
    if (message.state !== undefined) {
      writer.uint32(160).int32(message.state);
    }
    if (message.ocoId !== undefined) {
      writer.uint32(170).string(message.ocoId);
    }
    if (message.routeFactor !== undefined) {
      writer.uint32(178).string(message.routeFactor);
    }
    if (message.symbolId !== undefined) {
      writer.uint32(186).string(message.symbolId);
    }
    if (message.marketId !== undefined) {
      writer.uint32(194).string(message.marketId);
    }
    if (message.marketCurrencyId !== undefined) {
      writer.uint32(202).string(message.marketCurrencyId);
    }
    if (message.currencyId !== undefined) {
      writer.uint32(210).string(message.currencyId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrivateOrdersV3Api {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivateOrdersV3Api();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.price = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.quantity = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.avgPrice = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.orderType = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.tradeType = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isMaker = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.remainAmount = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.remainQuantity = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.lastDealQuantity = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.cumulativeQuantity = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.cumulativeAmount = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.createTime = longToNumber(reader.int64());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.market = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.triggerType = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.triggerPrice = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.state = reader.int32();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.ocoId = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.routeFactor = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.symbolId = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.marketId = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.marketCurrencyId = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.currencyId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivateOrdersV3Api {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      price: isSet(object.price) ? globalThis.String(object.price) : "",
      quantity: isSet(object.quantity) ? globalThis.String(object.quantity) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      avgPrice: isSet(object.avgPrice) ? globalThis.String(object.avgPrice) : "",
      orderType: isSet(object.orderType) ? globalThis.Number(object.orderType) : 0,
      tradeType: isSet(object.tradeType) ? globalThis.Number(object.tradeType) : 0,
      isMaker: isSet(object.isMaker) ? globalThis.Boolean(object.isMaker) : false,
      remainAmount: isSet(object.remainAmount) ? globalThis.String(object.remainAmount) : "",
      remainQuantity: isSet(object.remainQuantity) ? globalThis.String(object.remainQuantity) : "",
      lastDealQuantity: isSet(object.lastDealQuantity) ? globalThis.String(object.lastDealQuantity) : undefined,
      cumulativeQuantity: isSet(object.cumulativeQuantity) ? globalThis.String(object.cumulativeQuantity) : "",
      cumulativeAmount: isSet(object.cumulativeAmount) ? globalThis.String(object.cumulativeAmount) : "",
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      createTime: isSet(object.createTime) ? globalThis.Number(object.createTime) : 0,
      market: isSet(object.market) ? globalThis.String(object.market) : undefined,
      triggerType: isSet(object.triggerType) ? globalThis.Number(object.triggerType) : undefined,
      triggerPrice: isSet(object.triggerPrice) ? globalThis.String(object.triggerPrice) : undefined,
      state: isSet(object.state) ? globalThis.Number(object.state) : undefined,
      ocoId: isSet(object.ocoId) ? globalThis.String(object.ocoId) : undefined,
      routeFactor: isSet(object.routeFactor) ? globalThis.String(object.routeFactor) : undefined,
      symbolId: isSet(object.symbolId) ? globalThis.String(object.symbolId) : undefined,
      marketId: isSet(object.marketId) ? globalThis.String(object.marketId) : undefined,
      marketCurrencyId: isSet(object.marketCurrencyId) ? globalThis.String(object.marketCurrencyId) : undefined,
      currencyId: isSet(object.currencyId) ? globalThis.String(object.currencyId) : undefined,
    };
  },

  toJSON(message: PrivateOrdersV3Api): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.price !== "") {
      obj.price = message.price;
    }
    if (message.quantity !== "") {
      obj.quantity = message.quantity;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.avgPrice !== "") {
      obj.avgPrice = message.avgPrice;
    }
    if (message.orderType !== 0) {
      obj.orderType = Math.round(message.orderType);
    }
    if (message.tradeType !== 0) {
      obj.tradeType = Math.round(message.tradeType);
    }
    if (message.isMaker !== false) {
      obj.isMaker = message.isMaker;
    }
    if (message.remainAmount !== "") {
      obj.remainAmount = message.remainAmount;
    }
    if (message.remainQuantity !== "") {
      obj.remainQuantity = message.remainQuantity;
    }
    if (message.lastDealQuantity !== undefined) {
      obj.lastDealQuantity = message.lastDealQuantity;
    }
    if (message.cumulativeQuantity !== "") {
      obj.cumulativeQuantity = message.cumulativeQuantity;
    }
    if (message.cumulativeAmount !== "") {
      obj.cumulativeAmount = message.cumulativeAmount;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.createTime !== 0) {
      obj.createTime = Math.round(message.createTime);
    }
    if (message.market !== undefined) {
      obj.market = message.market;
    }
    if (message.triggerType !== undefined) {
      obj.triggerType = Math.round(message.triggerType);
    }
    if (message.triggerPrice !== undefined) {
      obj.triggerPrice = message.triggerPrice;
    }
    if (message.state !== undefined) {
      obj.state = Math.round(message.state);
    }
    if (message.ocoId !== undefined) {
      obj.ocoId = message.ocoId;
    }
    if (message.routeFactor !== undefined) {
      obj.routeFactor = message.routeFactor;
    }
    if (message.symbolId !== undefined) {
      obj.symbolId = message.symbolId;
    }
    if (message.marketId !== undefined) {
      obj.marketId = message.marketId;
    }
    if (message.marketCurrencyId !== undefined) {
      obj.marketCurrencyId = message.marketCurrencyId;
    }
    if (message.currencyId !== undefined) {
      obj.currencyId = message.currencyId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrivateOrdersV3Api>, I>>(base?: I): PrivateOrdersV3Api {
    return PrivateOrdersV3Api.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrivateOrdersV3Api>, I>>(object: I): PrivateOrdersV3Api {
    const message = createBasePrivateOrdersV3Api();
    message.id = object.id ?? "";
    message.clientId = object.clientId ?? "";
    message.price = object.price ?? "";
    message.quantity = object.quantity ?? "";
    message.amount = object.amount ?? "";
    message.avgPrice = object.avgPrice ?? "";
    message.orderType = object.orderType ?? 0;
    message.tradeType = object.tradeType ?? 0;
    message.isMaker = object.isMaker ?? false;
    message.remainAmount = object.remainAmount ?? "";
    message.remainQuantity = object.remainQuantity ?? "";
    message.lastDealQuantity = object.lastDealQuantity ?? undefined;
    message.cumulativeQuantity = object.cumulativeQuantity ?? "";
    message.cumulativeAmount = object.cumulativeAmount ?? "";
    message.status = object.status ?? 0;
    message.createTime = object.createTime ?? 0;
    message.market = object.market ?? undefined;
    message.triggerType = object.triggerType ?? undefined;
    message.triggerPrice = object.triggerPrice ?? undefined;
    message.state = object.state ?? undefined;
    message.ocoId = object.ocoId ?? undefined;
    message.routeFactor = object.routeFactor ?? undefined;
    message.symbolId = object.symbolId ?? undefined;
    message.marketId = object.marketId ?? undefined;
    message.marketCurrencyId = object.marketCurrencyId ?? undefined;
    message.currencyId = object.currencyId ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
