// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: PublicMiniTickerV3Api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface PublicMiniTickerV3Api {
  /** 交易对名 */
  symbol: string;
  /** 最新价格 */
  price: string;
  /** utc+8时区涨跌幅 */
  rate: string;
  /** 时区涨跌幅 */
  zonedRate: string;
  /** 滚动最高价 */
  high: string;
  /** 滚动最低价 */
  low: string;
  /** 滚动成交额 */
  volume: string;
  /** 滚动成交量 */
  quantity: string;
  /** utc+8时区上期收盘价模式涨跌幅 */
  lastCloseRate: string;
  /** 上期收盘价模式时区涨跌幅 */
  lastCloseZonedRate: string;
  /** 上期收盘价模式滚动最高价 */
  lastCloseHigh: string;
  /** 上期收盘价模式滚动最低价 */
  lastCloseLow: string;
}

function createBasePublicMiniTickerV3Api(): PublicMiniTickerV3Api {
  return {
    symbol: "",
    price: "",
    rate: "",
    zonedRate: "",
    high: "",
    low: "",
    volume: "",
    quantity: "",
    lastCloseRate: "",
    lastCloseZonedRate: "",
    lastCloseHigh: "",
    lastCloseLow: "",
  };
}

export const PublicMiniTickerV3Api: MessageFns<PublicMiniTickerV3Api> = {
  encode(message: PublicMiniTickerV3Api, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.symbol !== "") {
      writer.uint32(10).string(message.symbol);
    }
    if (message.price !== "") {
      writer.uint32(18).string(message.price);
    }
    if (message.rate !== "") {
      writer.uint32(26).string(message.rate);
    }
    if (message.zonedRate !== "") {
      writer.uint32(34).string(message.zonedRate);
    }
    if (message.high !== "") {
      writer.uint32(42).string(message.high);
    }
    if (message.low !== "") {
      writer.uint32(50).string(message.low);
    }
    if (message.volume !== "") {
      writer.uint32(58).string(message.volume);
    }
    if (message.quantity !== "") {
      writer.uint32(66).string(message.quantity);
    }
    if (message.lastCloseRate !== "") {
      writer.uint32(74).string(message.lastCloseRate);
    }
    if (message.lastCloseZonedRate !== "") {
      writer.uint32(82).string(message.lastCloseZonedRate);
    }
    if (message.lastCloseHigh !== "") {
      writer.uint32(90).string(message.lastCloseHigh);
    }
    if (message.lastCloseLow !== "") {
      writer.uint32(98).string(message.lastCloseLow);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicMiniTickerV3Api {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicMiniTickerV3Api();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.symbol = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.price = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rate = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.zonedRate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.high = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.low = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.volume = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.quantity = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.lastCloseRate = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.lastCloseZonedRate = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.lastCloseHigh = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.lastCloseLow = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicMiniTickerV3Api {
    return {
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      price: isSet(object.price) ? globalThis.String(object.price) : "",
      rate: isSet(object.rate) ? globalThis.String(object.rate) : "",
      zonedRate: isSet(object.zonedRate) ? globalThis.String(object.zonedRate) : "",
      high: isSet(object.high) ? globalThis.String(object.high) : "",
      low: isSet(object.low) ? globalThis.String(object.low) : "",
      volume: isSet(object.volume) ? globalThis.String(object.volume) : "",
      quantity: isSet(object.quantity) ? globalThis.String(object.quantity) : "",
      lastCloseRate: isSet(object.lastCloseRate) ? globalThis.String(object.lastCloseRate) : "",
      lastCloseZonedRate: isSet(object.lastCloseZonedRate) ? globalThis.String(object.lastCloseZonedRate) : "",
      lastCloseHigh: isSet(object.lastCloseHigh) ? globalThis.String(object.lastCloseHigh) : "",
      lastCloseLow: isSet(object.lastCloseLow) ? globalThis.String(object.lastCloseLow) : "",
    };
  },

  toJSON(message: PublicMiniTickerV3Api): unknown {
    const obj: any = {};
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (message.price !== "") {
      obj.price = message.price;
    }
    if (message.rate !== "") {
      obj.rate = message.rate;
    }
    if (message.zonedRate !== "") {
      obj.zonedRate = message.zonedRate;
    }
    if (message.high !== "") {
      obj.high = message.high;
    }
    if (message.low !== "") {
      obj.low = message.low;
    }
    if (message.volume !== "") {
      obj.volume = message.volume;
    }
    if (message.quantity !== "") {
      obj.quantity = message.quantity;
    }
    if (message.lastCloseRate !== "") {
      obj.lastCloseRate = message.lastCloseRate;
    }
    if (message.lastCloseZonedRate !== "") {
      obj.lastCloseZonedRate = message.lastCloseZonedRate;
    }
    if (message.lastCloseHigh !== "") {
      obj.lastCloseHigh = message.lastCloseHigh;
    }
    if (message.lastCloseLow !== "") {
      obj.lastCloseLow = message.lastCloseLow;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicMiniTickerV3Api>, I>>(base?: I): PublicMiniTickerV3Api {
    return PublicMiniTickerV3Api.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicMiniTickerV3Api>, I>>(object: I): PublicMiniTickerV3Api {
    const message = createBasePublicMiniTickerV3Api();
    message.symbol = object.symbol ?? "";
    message.price = object.price ?? "";
    message.rate = object.rate ?? "";
    message.zonedRate = object.zonedRate ?? "";
    message.high = object.high ?? "";
    message.low = object.low ?? "";
    message.volume = object.volume ?? "";
    message.quantity = object.quantity ?? "";
    message.lastCloseRate = object.lastCloseRate ?? "";
    message.lastCloseZonedRate = object.lastCloseZonedRate ?? "";
    message.lastCloseHigh = object.lastCloseHigh ?? "";
    message.lastCloseLow = object.lastCloseLow ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
