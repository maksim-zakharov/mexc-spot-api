// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: PrivateAccountV3Api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface PrivateAccountV3Api {
  vcoinName: string;
  coinId: string;
  balanceAmount: string;
  balanceAmountChange: string;
  frozenAmount: string;
  frozenAmountChange: string;
  type: string;
  time: number;
}

function createBasePrivateAccountV3Api(): PrivateAccountV3Api {
  return {
    vcoinName: "",
    coinId: "",
    balanceAmount: "",
    balanceAmountChange: "",
    frozenAmount: "",
    frozenAmountChange: "",
    type: "",
    time: 0,
  };
}

export const PrivateAccountV3Api: MessageFns<PrivateAccountV3Api> = {
  encode(message: PrivateAccountV3Api, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vcoinName !== "") {
      writer.uint32(10).string(message.vcoinName);
    }
    if (message.coinId !== "") {
      writer.uint32(18).string(message.coinId);
    }
    if (message.balanceAmount !== "") {
      writer.uint32(26).string(message.balanceAmount);
    }
    if (message.balanceAmountChange !== "") {
      writer.uint32(34).string(message.balanceAmountChange);
    }
    if (message.frozenAmount !== "") {
      writer.uint32(42).string(message.frozenAmount);
    }
    if (message.frozenAmountChange !== "") {
      writer.uint32(50).string(message.frozenAmountChange);
    }
    if (message.type !== "") {
      writer.uint32(58).string(message.type);
    }
    if (message.time !== 0) {
      writer.uint32(64).int64(message.time);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrivateAccountV3Api {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivateAccountV3Api();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.vcoinName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.coinId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.balanceAmount = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.balanceAmountChange = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.frozenAmount = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.frozenAmountChange = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.time = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivateAccountV3Api {
    return {
      vcoinName: isSet(object.vcoinName) ? globalThis.String(object.vcoinName) : "",
      coinId: isSet(object.coinId) ? globalThis.String(object.coinId) : "",
      balanceAmount: isSet(object.balanceAmount) ? globalThis.String(object.balanceAmount) : "",
      balanceAmountChange: isSet(object.balanceAmountChange) ? globalThis.String(object.balanceAmountChange) : "",
      frozenAmount: isSet(object.frozenAmount) ? globalThis.String(object.frozenAmount) : "",
      frozenAmountChange: isSet(object.frozenAmountChange) ? globalThis.String(object.frozenAmountChange) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      time: isSet(object.time) ? globalThis.Number(object.time) : 0,
    };
  },

  toJSON(message: PrivateAccountV3Api): unknown {
    const obj: any = {};
    if (message.vcoinName !== "") {
      obj.vcoinName = message.vcoinName;
    }
    if (message.coinId !== "") {
      obj.coinId = message.coinId;
    }
    if (message.balanceAmount !== "") {
      obj.balanceAmount = message.balanceAmount;
    }
    if (message.balanceAmountChange !== "") {
      obj.balanceAmountChange = message.balanceAmountChange;
    }
    if (message.frozenAmount !== "") {
      obj.frozenAmount = message.frozenAmount;
    }
    if (message.frozenAmountChange !== "") {
      obj.frozenAmountChange = message.frozenAmountChange;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.time !== 0) {
      obj.time = Math.round(message.time);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrivateAccountV3Api>, I>>(base?: I): PrivateAccountV3Api {
    return PrivateAccountV3Api.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrivateAccountV3Api>, I>>(object: I): PrivateAccountV3Api {
    const message = createBasePrivateAccountV3Api();
    message.vcoinName = object.vcoinName ?? "";
    message.coinId = object.coinId ?? "";
    message.balanceAmount = object.balanceAmount ?? "";
    message.balanceAmountChange = object.balanceAmountChange ?? "";
    message.frozenAmount = object.frozenAmount ?? "";
    message.frozenAmountChange = object.frozenAmountChange ?? "";
    message.type = object.type ?? "";
    message.time = object.time ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
