// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: PublicSpotKlineV3Api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface PublicSpotKlineV3Api {
  /** K线周期(Min1,Min5,Min15,Min30,Min60,Hour4,Hour8,Day1,Week1,Month1) */
  interval: string;
  /** 窗口开始时间戳(秒时间戳) */
  windowStart: number;
  /** 开盘价 */
  openingPrice: string;
  /** 收盘价 */
  closingPrice: string;
  /** 最高价 */
  highestPrice: string;
  /** 最低价 */
  lowestPrice: string;
  /** 成交量 */
  volume: string;
  /** 成交额 */
  amount: string;
  /** 窗口结束时间戳(秒时间戳) */
  windowEnd: number;
}

function createBasePublicSpotKlineV3Api(): PublicSpotKlineV3Api {
  return {
    interval: "",
    windowStart: 0,
    openingPrice: "",
    closingPrice: "",
    highestPrice: "",
    lowestPrice: "",
    volume: "",
    amount: "",
    windowEnd: 0,
  };
}

export const PublicSpotKlineV3Api: MessageFns<PublicSpotKlineV3Api> = {
  encode(message: PublicSpotKlineV3Api, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.interval !== "") {
      writer.uint32(10).string(message.interval);
    }
    if (message.windowStart !== 0) {
      writer.uint32(16).int64(message.windowStart);
    }
    if (message.openingPrice !== "") {
      writer.uint32(26).string(message.openingPrice);
    }
    if (message.closingPrice !== "") {
      writer.uint32(34).string(message.closingPrice);
    }
    if (message.highestPrice !== "") {
      writer.uint32(42).string(message.highestPrice);
    }
    if (message.lowestPrice !== "") {
      writer.uint32(50).string(message.lowestPrice);
    }
    if (message.volume !== "") {
      writer.uint32(58).string(message.volume);
    }
    if (message.amount !== "") {
      writer.uint32(66).string(message.amount);
    }
    if (message.windowEnd !== 0) {
      writer.uint32(72).int64(message.windowEnd);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublicSpotKlineV3Api {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublicSpotKlineV3Api();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.interval = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.windowStart = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.openingPrice = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.closingPrice = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.highestPrice = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.lowestPrice = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.volume = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.windowEnd = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublicSpotKlineV3Api {
    return {
      interval: isSet(object.interval) ? globalThis.String(object.interval) : "",
      windowStart: isSet(object.windowStart) ? globalThis.Number(object.windowStart) : 0,
      openingPrice: isSet(object.openingPrice) ? globalThis.String(object.openingPrice) : "",
      closingPrice: isSet(object.closingPrice) ? globalThis.String(object.closingPrice) : "",
      highestPrice: isSet(object.highestPrice) ? globalThis.String(object.highestPrice) : "",
      lowestPrice: isSet(object.lowestPrice) ? globalThis.String(object.lowestPrice) : "",
      volume: isSet(object.volume) ? globalThis.String(object.volume) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      windowEnd: isSet(object.windowEnd) ? globalThis.Number(object.windowEnd) : 0,
    };
  },

  toJSON(message: PublicSpotKlineV3Api): unknown {
    const obj: any = {};
    if (message.interval !== "") {
      obj.interval = message.interval;
    }
    if (message.windowStart !== 0) {
      obj.windowStart = Math.round(message.windowStart);
    }
    if (message.openingPrice !== "") {
      obj.openingPrice = message.openingPrice;
    }
    if (message.closingPrice !== "") {
      obj.closingPrice = message.closingPrice;
    }
    if (message.highestPrice !== "") {
      obj.highestPrice = message.highestPrice;
    }
    if (message.lowestPrice !== "") {
      obj.lowestPrice = message.lowestPrice;
    }
    if (message.volume !== "") {
      obj.volume = message.volume;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.windowEnd !== 0) {
      obj.windowEnd = Math.round(message.windowEnd);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublicSpotKlineV3Api>, I>>(base?: I): PublicSpotKlineV3Api {
    return PublicSpotKlineV3Api.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublicSpotKlineV3Api>, I>>(object: I): PublicSpotKlineV3Api {
    const message = createBasePublicSpotKlineV3Api();
    message.interval = object.interval ?? "";
    message.windowStart = object.windowStart ?? 0;
    message.openingPrice = object.openingPrice ?? "";
    message.closingPrice = object.closingPrice ?? "";
    message.highestPrice = object.highestPrice ?? "";
    message.lowestPrice = object.lowestPrice ?? "";
    message.volume = object.volume ?? "";
    message.amount = object.amount ?? "";
    message.windowEnd = object.windowEnd ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
