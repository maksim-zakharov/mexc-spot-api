// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: PrivateDealsV3Api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface PrivateDealsV3Api {
  price: string;
  quantity: string;
  amount: string;
  tradeType: number;
  isMaker: boolean;
  isSelfTrade: boolean;
  tradeId: string;
  clientOrderId: string;
  orderId: string;
  feeAmount: string;
  feeCurrency: string;
  time: number;
}

function createBasePrivateDealsV3Api(): PrivateDealsV3Api {
  return {
    price: "",
    quantity: "",
    amount: "",
    tradeType: 0,
    isMaker: false,
    isSelfTrade: false,
    tradeId: "",
    clientOrderId: "",
    orderId: "",
    feeAmount: "",
    feeCurrency: "",
    time: 0,
  };
}

export const PrivateDealsV3Api: MessageFns<PrivateDealsV3Api> = {
  encode(message: PrivateDealsV3Api, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.price !== "") {
      writer.uint32(10).string(message.price);
    }
    if (message.quantity !== "") {
      writer.uint32(18).string(message.quantity);
    }
    if (message.amount !== "") {
      writer.uint32(26).string(message.amount);
    }
    if (message.tradeType !== 0) {
      writer.uint32(32).int32(message.tradeType);
    }
    if (message.isMaker !== false) {
      writer.uint32(40).bool(message.isMaker);
    }
    if (message.isSelfTrade !== false) {
      writer.uint32(48).bool(message.isSelfTrade);
    }
    if (message.tradeId !== "") {
      writer.uint32(58).string(message.tradeId);
    }
    if (message.clientOrderId !== "") {
      writer.uint32(66).string(message.clientOrderId);
    }
    if (message.orderId !== "") {
      writer.uint32(74).string(message.orderId);
    }
    if (message.feeAmount !== "") {
      writer.uint32(82).string(message.feeAmount);
    }
    if (message.feeCurrency !== "") {
      writer.uint32(90).string(message.feeCurrency);
    }
    if (message.time !== 0) {
      writer.uint32(96).int64(message.time);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrivateDealsV3Api {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivateDealsV3Api();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.price = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.quantity = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.tradeType = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isMaker = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isSelfTrade = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tradeId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.clientOrderId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.feeAmount = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.feeCurrency = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.time = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivateDealsV3Api {
    return {
      price: isSet(object.price) ? globalThis.String(object.price) : "",
      quantity: isSet(object.quantity) ? globalThis.String(object.quantity) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      tradeType: isSet(object.tradeType) ? globalThis.Number(object.tradeType) : 0,
      isMaker: isSet(object.isMaker) ? globalThis.Boolean(object.isMaker) : false,
      isSelfTrade: isSet(object.isSelfTrade) ? globalThis.Boolean(object.isSelfTrade) : false,
      tradeId: isSet(object.tradeId) ? globalThis.String(object.tradeId) : "",
      clientOrderId: isSet(object.clientOrderId) ? globalThis.String(object.clientOrderId) : "",
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      feeAmount: isSet(object.feeAmount) ? globalThis.String(object.feeAmount) : "",
      feeCurrency: isSet(object.feeCurrency) ? globalThis.String(object.feeCurrency) : "",
      time: isSet(object.time) ? globalThis.Number(object.time) : 0,
    };
  },

  toJSON(message: PrivateDealsV3Api): unknown {
    const obj: any = {};
    if (message.price !== "") {
      obj.price = message.price;
    }
    if (message.quantity !== "") {
      obj.quantity = message.quantity;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.tradeType !== 0) {
      obj.tradeType = Math.round(message.tradeType);
    }
    if (message.isMaker !== false) {
      obj.isMaker = message.isMaker;
    }
    if (message.isSelfTrade !== false) {
      obj.isSelfTrade = message.isSelfTrade;
    }
    if (message.tradeId !== "") {
      obj.tradeId = message.tradeId;
    }
    if (message.clientOrderId !== "") {
      obj.clientOrderId = message.clientOrderId;
    }
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.feeAmount !== "") {
      obj.feeAmount = message.feeAmount;
    }
    if (message.feeCurrency !== "") {
      obj.feeCurrency = message.feeCurrency;
    }
    if (message.time !== 0) {
      obj.time = Math.round(message.time);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrivateDealsV3Api>, I>>(base?: I): PrivateDealsV3Api {
    return PrivateDealsV3Api.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrivateDealsV3Api>, I>>(object: I): PrivateDealsV3Api {
    const message = createBasePrivateDealsV3Api();
    message.price = object.price ?? "";
    message.quantity = object.quantity ?? "";
    message.amount = object.amount ?? "";
    message.tradeType = object.tradeType ?? 0;
    message.isMaker = object.isMaker ?? false;
    message.isSelfTrade = object.isSelfTrade ?? false;
    message.tradeId = object.tradeId ?? "";
    message.clientOrderId = object.clientOrderId ?? "";
    message.orderId = object.orderId ?? "";
    message.feeAmount = object.feeAmount ?? "";
    message.feeCurrency = object.feeCurrency ?? "";
    message.time = object.time ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
